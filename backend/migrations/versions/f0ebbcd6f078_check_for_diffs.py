"""check for diffs

Revision ID: f0ebbcd6f078
Revises: 
Create Date: 2025-09-24 16:40:20.806532

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = 'f0ebbcd6f078'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('food_associations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('idx_meal_confidence'))
        batch_op.drop_index(batch_op.f('idx_meal_food_pair'))
        batch_op.drop_index(batch_op.f('idx_meal_support'))

    op.drop_table('food_associations')
    with op.batch_alter_table('diary_entries', schema=None) as batch_op:
        batch_op.alter_column('date',
               existing_type=sa.DATE(),
               nullable=False)
        batch_op.alter_column('grams',
               existing_type=sa.FLOAT(),
               nullable=False)

    with op.batch_alter_table('foods', schema=None) as batch_op:
        batch_op.alter_column('last_portion',
               existing_type=sa.REAL(),
               type_=sa.Float(),
               existing_nullable=True,
               existing_server_default=sa.text('(1.0)'))

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('foods', schema=None) as batch_op:
        batch_op.alter_column('last_portion',
               existing_type=sa.Float(),
               type_=sa.REAL(),
               existing_nullable=True,
               existing_server_default=sa.text('(1.0)'))

    with op.batch_alter_table('diary_entries', schema=None) as batch_op:
        batch_op.alter_column('grams',
               existing_type=sa.FLOAT(),
               nullable=True)
        batch_op.alter_column('date',
               existing_type=sa.DATE(),
               nullable=True)

    op.create_table('food_associations',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('meal_type', sa.VARCHAR(length=50), nullable=False),
    sa.Column('food1_id', sa.INTEGER(), nullable=False),
    sa.Column('food2_id', sa.INTEGER(), nullable=False),
    sa.Column('co_occurrence_count', sa.INTEGER(), nullable=False),
    sa.Column('total_occurrences_food1', sa.INTEGER(), nullable=False),
    sa.Column('total_occurrences_food2', sa.INTEGER(), nullable=False),
    sa.Column('confidence', sa.FLOAT(), nullable=False),
    sa.Column('support', sa.FLOAT(), nullable=False),
    sa.Column('created_at', sa.DATETIME(), nullable=False),
    sa.Column('updated_at', sa.DATETIME(), nullable=False),
    sa.ForeignKeyConstraint(['food1_id'], ['foods.id'], ),
    sa.ForeignKeyConstraint(['food2_id'], ['foods.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('food_associations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('idx_meal_support'), ['meal_type', 'support'], unique=False)
        batch_op.create_index(batch_op.f('idx_meal_food_pair'), ['meal_type', 'food1_id', 'food2_id'], unique=1)
        batch_op.create_index(batch_op.f('idx_meal_confidence'), ['meal_type', 'confidence'], unique=False)

    # ### end Alembic commands ###
